{"version":3,"sources":["components/AstronautsContainer/AstronautsContainer.js","components/RenderAstronauts/RenderAstronauts.js","components/RefreshButton/RefreshButton.js","components/ISSLocation/Marker.tsx","components/ISSLocation/ISSLocation.js","App.js","serviceWorker.js","index.js"],"names":["AstronautsContainer","className","this","props","name","craft","React","Component","RenderAstronauts","astronauts","map","item","key","number","iterateAstronauts","Marker","color","id","style","backgroundColor","cursor","title","ISSLocation","state","issLat","issLng","fetch","then","response","json","responseJson","setState","iss_position","latitude","longitude","err","console","log","intervalId","setInterval","getISSLocation","clearInterval","height","width","bootstrapURLKeys","defaultCenter","center","defaultZoom","zoom","lat","lng","defaultProps","App","amount","people","refreshAstronauts","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.781fecfb.chunk.js","sourcesContent":["import React from 'react';\nimport './AstronautsContainer.css';\n\nexport class AstronautsContainer extends React.Component{\n\trender(){\n\t\treturn (<div className='astroContainer'>\n\t\t\t\t<p className='astroName'>{this.props.name}</p>\n\t\t\t\t<div className='descriptionContainer'>\n\t\t\t\t\t<p className='astroShip'>Onboard the: {this.props.craft}</p>\n\t\t\t\t</div>\n\t\t\t</div>)\n\t}\n}","import React from 'react';\nimport {AstronautsContainer} from '../AstronautsContainer/AstronautsContainer';\nimport './RenderAstronauts.css'\n\n\nexport class RenderAstronauts extends React.Component {\n\titerateAstronauts(){\n\t\treturn this.props.astronauts.map(item => {\n\t\t\treturn (<AstronautsContainer name={item.name} craft={item.craft} key={item.name} />)\n\t\t})\n\t}\n\trender(){\n\t\treturn(\n\t\t\t<div className='contentContainer'>\n\t\t\t\t<div className='numberContainer'>\n\t\t\t\t\t<h3 className='numberOfAstroHeader'>Currently in space:</h3>\n\t\t\t\t\t<p className='numberOfAstro'>{this.props.number}</p>\n\t\t\t\t</div>\n\t\t\t\t<div className='astroContContainer'>\n\t\t\t\t\t<h3 className='numberOfAstroHeader'>Astronauts:</h3>\n\t\t\t\t\t<div className='astroContCont'>{this.iterateAstronauts()}</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t)\n\t}\n}","import React from 'react';\nimport './RefreshButton.css';\n\nexport class RefreshButton extends React.Component{\n    render(){\n        return(\n            <div className='buttonBR' >Refresh</div>\n        )\n    }\n}","import React from 'react';\nimport './Marker.css';\n\nconst Marker = (props: any) => {\n    const { color, name, id } = props;\n    return (\n      <div className=\"marker\"\n        style={{ backgroundColor: color, cursor: 'pointer'}}\n        title={name}\n      />\n    );\n  };\n\n export default Marker;\n","import './ISSLocation.css';\nimport React, { Component } from 'react';\nimport GoogleMapReact from 'google-map-react';\nimport Marker from './Marker.tsx';\n\n// const AnyReactComponent = ({ text }) => <div>{text}</div>;\n\nexport class ISSLocation extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      issLat: 10,\n      issLng: 10\n    }\n  }\n  getISSLocation(){\n    try {\n      fetch('http://api.open-notify.org/iss-now.json')\n        .then(response => response.json())\n        .then(responseJson => {\n          this.setState({\n            issLat: responseJson.iss_position.latitude,\n            issLng: responseJson.iss_position.longitude\n          })\n        })\n    } catch(err) {\n      console.log(err);\n      console.log('Error in requesting astronauts')\n    }\n  }\n  componentDidMount(){\n    this.intervalId = setInterval(() => this.getISSLocation(), 1000)\n    this.getISSLocation();\n  }\n  componentWillUnmount() {\n    clearInterval(this.intervalId);\n  }\n  static defaultProps = {\n    center: {\n      lat: 0,\n      lng: 0\n    },\n    zoom: 1\n  };\n  render() {\n    return (\n      // Important! Always set the container height explicitly\n      <div style={{ height: '70vh', width: '100%'}} className='Maps'>\n        <GoogleMapReact\n          bootstrapURLKeys={{ key: 'AIzaSyDq5PGmYXK0m-r22VlaevmzSDvrC3BDXzw' }}\n          defaultCenter={this.props.center}\n          defaultZoom={this.props.zoom}\n        >\n\n          <Marker\n            lat={this.state.issLat}\n            lng={this.state.issLng}\n            name=\"My Marker\"\n            color=\"rgba(255, 87, 51, 1)\"\n          />\n\n        </GoogleMapReact>\n        \n      </div>\n    );\n  }\n}\n\n\n// <AnyReactComponent\n//   lat={this.state.issLat}\n//   lng={this.state.issLng}\n//   text=\"ISS location\"\n//   // map='map'\n//   // icon='ISS.png'\n// />","import React from 'react';\nimport './App.css';\nimport {RenderAstronauts} from './components/RenderAstronauts/RenderAstronauts'\nimport { RefreshButton } from './components/RefreshButton/RefreshButton';\nimport {ISSLocation} from './components/ISSLocation/ISSLocation'\n\nexport class App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state = { \n      amount: null,\n      astronauts: []\n    }\n  }\n  refreshAstronauts(){\n    try {\n      fetch('http://api.open-notify.org/astros.json')\n        .then(response => response.json())\n        .then(responseJson => {\n          this.setState({\n            amount: responseJson.number,\n            astronauts: responseJson.people\n          })\n        })\n    } catch(err) {\n      console.log(err);\n      console.log('Error in requesting astronauts')\n    }\n  }\n  componentDidMount(){\n    \n    this.refreshAstronauts();\n    \n  }\n  render(){\n    return (<div>\n      <div className=\"canvas\">\n        <div className='titleContainer'>\n          <h1 className='title'>Astronauts tracker</h1>\n        </div>\n        <div><RenderAstronauts number={this.state.amount} astronauts={this.state.astronauts}/></div>\n        {/* <RefreshButton refreshAstronauts={this.refreshAstronauts} /> */}\n      </div>\n      <h2 className='issTitle'>ISS current location:</h2>\n      <ISSLocation />\n      </div>)\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}